OOP PHP

Object Oriented Programming = gaya pemrograman / paradigma pemrograman (cara menuliskan code)

Procedural Programming (Program Kecil)
    > Instruksi dilakukan langkah demi langkah
    > Memecah program menjadi bagian bagian kecil (function)
    > Linear (code dibaca dari atas ke bawah)

    Kelebihan : 
        1. To the point
        2. Kemudahan untuk dibaca oleh compiler
        3. Mudah ditelusuri (error)
        4. Lebih sedikit memori penggunaan

Object Oriented Programming (Program Besar)
    > Menyusun code kedalam object
    > Object adalah unit dasar pembentuk dari programnya
    > Object menyimpan data dan prilaku (cenderung tidak memiliki variabel dan function lebih ke property & method)
    > Object bisa saling berinteraksi

    Kelebihan : 
        1. Representasi dunia nyata
        2. Enkapsulasi (data menjadi aman dan tidak bisa di proses oleh bagian lain) & Abstraksi data
        3. Reusibility (menggunakan ulang bagian yang telah dibuat)
        4. Skalabilitas & ekstensibilitas
        5. Kemudahan Pengelolaan & Kolaborasi
        6. Digunakan oleh framework


Class sebagai Template (misalkan : denah / blueprint)
Object (misalkan: mobil)
Property (misalkan: ban, kaca, stir, kunci, warna ...)
Method (misalkan: maju, mundur, belok, atur kecepatan ...)

Constructor [Method khusus] = method yg otomatis dijalankan ketika sebuah kelas dibuat sebuah objectnya.
biasanya digunakan untuk menyimpan koneksi ke database 

Object Type merepresentasikan object dari sebuah class.

Inheritance 1 [Pewarisan] 
    > Konsep yang akan menciptakan hirarki antar class (Parent & Child).
    > Child class mewarisi semua property dan method milik Parentnya. (yang visible)
    > Child class memperluas (extends) fungsionalitas dari parentnya.

Inheritance 2 [Pewarisan]
    > akan mencari Constructor di childnya jika tidak ada maka akan mencari ke parentnya

Overriding = membuat method dikelas child dengan nama yang sama denga parentnya (menimpa method parentnya). 

Visibility (Akses modifire)
    > Konsep untuk mengatur akses dari property dan method dari sebuah object.
    > public, property dan methodnya dapat digunakan dimana saja, bahkan diluar class.
    > protected, hanya bisa digunakan untuk class beserta turunannya.
    > private, hanya dapat digunakan disebuah class tertentu saja.

    Kenapa menggunakan Visibility?
        1. Hanya memperlihatkan aspek dari class yang dibutuhkan 'client'
        2. Menentukan kebutuhan yang jelas untuk object.
        3. Memberikan kendali pada code untuk menghindari 'bug'.